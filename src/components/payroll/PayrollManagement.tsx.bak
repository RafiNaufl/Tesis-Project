"use client";

import { useState, useEffect, useRef } from "react";
import { useSession } from "next-auth/react";
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";

type PayrollRecord = {
  id: string;
  month: number;
  year: number;
  baseSalary: number;
  totalAllowances: number;
  totalDeductions: number;
  netSalary: number;
  daysPresent: number;
  daysAbsent: number;
  overtimeHours: number;
  overtimeAmount: number;
  status: "PENDING" | "PAID" | "CANCELLED";
  createdAt: string;
  paidAt: string | null;
  employeeName: string;
  empId: string;
  employeeId: string; // ID karyawan untuk API calls
  position?: string;
  department?: string;
  // Properti tambahan untuk kasbon dan pinjaman lunak
  advanceAmount?: number;
  softLoanDeduction?: number;
};

export default function PayrollManagement() {
  const { data: session } = useSession();
  const [isLoading, setIsLoading] = useState(true);
  const [payrollRecords, setPayrollRecords] = useState<PayrollRecord[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [selectedMonth, setSelectedMonth] = useState<number>(new Date().getMonth() + 1);
  const [selectedYear, setSelectedYear] = useState<number>(new Date().getFullYear());
  const [generatingPayroll, setGeneratingPayroll] = useState(false);
  const [processingId, setProcessingId] = useState<string | null>(null);
  const [generatingPdf, setGeneratingPdf] = useState<string | null>(null);
  const [showPreview, setShowPreview] = useState(false);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [selectedRecord, setSelectedRecord] = useState<PayrollRecord | null>(null);
  const previewRef = useRef<HTMLDivElement>(null);
  const isAdmin = session?.user?.role === "ADMIN";

  useEffect(() => {
    const fetchPayroll = async () => {
      if (!session) return;
      
      setIsLoading(true);
      setError(null);
      
      try {
        // Fetch payroll data from API
        const response = await fetch(
          `/api/payroll?month=${selectedMonth}&year=${selectedYear}`
        );
        
        if (!response.ok) {
          throw new Error("Gagal mengambil data penggajian");
        }
        
        const data = await response.json();
        
        // Fetch advance and soft loan data for each payroll record
        const recordsWithDeductions = await Promise.all(
          data.map(async (record: PayrollRecord) => {
            try {
              // Fetch advance data
              const advanceResponse = await fetch(
                `/api/advance?employeeId=${record.employeeId}&month=${record.month}&year=${record.year}&status=APPROVED`
              );
              
              // Fetch soft loan data
              const softLoanResponse = await fetch(
                `/api/soft-loan?employeeId=${record.employeeId}&status=ACTIVE`
              );
              
              if (advanceResponse.ok) {
                const advanceData = await advanceResponse.json();
                if (advanceData && advanceData.length > 0) {
                  record.advanceAmount = advanceData[0].amount;
                }
              }
              
              if (softLoanResponse.ok) {
                const softLoanData = await softLoanResponse.json();
                if (softLoanData && softLoanData.length > 0) {
                  record.softLoanDeduction = softLoanData[0].monthlyAmount;
                }
              }
              
              return record;
            } catch (error) {
              console.error("Error fetching deductions:", error);
              return record;
            }
          })
        );
        
        setPayrollRecords(recordsWithDeductions);
      } catch (err) {
        console.error("Error fetching payroll:", err);
        setError("Gagal memuat data penggajian");
      } finally {
        setIsLoading(false);
      }
    };

    fetchPayroll();
  }, [session, selectedMonth, selectedYear]);

  const formatCurrency = (amount: number): string => {
    return new Intl.NumberFormat("id-ID", {
      style: "currency",
      currency: "IDR",
      minimumFractionDigits: 0,
    }).format(amount);
  };

  const formatDate = (date: string | null): string => {
    if (!date) return "-";
    return new Date(date).toLocaleDateString('id-ID');
  };

  const getMonthName = (month: number): string => {
    const date = new Date();
    date.setMonth(month - 1);
    return date.toLocaleString('id-ID', { month: 'long' });
  };
  
  // Fungsi untuk menghasilkan PDF slip gaji dan menampilkan preview
  const generatePayslipPreview = async (record: PayrollRecord) => {
    try {
      setGeneratingPdf(record.id);
      setSelectedRecord(record);
      
      // Buat dokumen PDF baru dengan ukuran A4
      const doc = new jsPDF({
        orientation: "portrait",
        unit: "mm",
        format: "a4",
      });
      
      // Tambahkan judul
      doc.setFontSize(16);
      doc.setFont("helvetica", "bold");
      doc.text("SLIP GAJI KARYAWAN", 105, 15, { align: "center" });
      
      // Tambahkan logo perusahaan (opsional)
      // doc.addImage("logo.png", "PNG", 10, 10, 30, 15);
      
      // Tambahkan informasi perusahaan
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      doc.text("PT. NAMA PERUSAHAAN", 105, 25, { align: "center" });
      doc.text("Jl. Alamat Perusahaan No. 123, Jakarta", 105, 30, { align: "center" });
      doc.text("Telp: (021) 1234567", 105, 35, { align: "center" });
      
      // Tambahkan garis pemisah
      doc.setLineWidth(0.5);
      doc.line(10, 40, 200, 40);
      
      // Tambahkan informasi karyawan
      doc.setFontSize(11);
      doc.setFont("helvetica", "bold");
      doc.text("INFORMASI KARYAWAN", 10, 50);
      
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      doc.text(`Nama: ${record.employeeName}`, 10, 60);
      doc.text(`ID Karyawan: ${record.empId}`, 10, 65);
      doc.text(`Jabatan: ${record.position || '-'}`, 10, 70);
      doc.text(`Departemen: ${record.department || '-'}`, 10, 75);
      
      // Tambahkan informasi periode
      doc.setFontSize(11);
      doc.setFont("helvetica", "bold");
      doc.text("PERIODE PENGGAJIAN", 120, 50);
      
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      doc.text(`Bulan: ${getMonthName(record.month)} ${record.year}`, 120, 60);
      doc.text(`Tanggal Pembayaran: ${formatDate(record.paidAt) || 'Belum dibayar'}`, 120, 65);
      doc.text(`Status: ${record.status === "PAID" ? "DIBAYAR" : record.status === "PENDING" ? "TERTUNDA" : "DIBATALKAN"}`, 120, 70);
      
      // Tambahkan garis pemisah
      doc.setLineWidth(0.5);
      doc.line(10, 85, 200, 85);
      
      // Tambahkan tabel rincian gaji menggunakan jspdf-autotable
      autoTable(doc, {
        startY: 90,
        head: [['Deskripsi', 'Jumlah']],
        body: [
          ['Gaji Pokok', formatCurrency(record.baseSalary)],
          ['Tunjangan', formatCurrency(record.totalAllowances)],
          ['Lembur', formatCurrency(record.overtimeAmount)],
          ['Potongan Keterlambatan/Absensi', formatCurrency(record.totalDeductions)],
          // Tambahkan informasi kasbon jika ada
          ...(record.advanceAmount ? [['Potongan Kasbon', formatCurrency(record.advanceAmount)]] : []),
          // Tambahkan informasi pinjaman lunak jika ada
          ...(record.softLoanDeduction ? [['Cicilan Pinjaman Lunak', formatCurrency(record.softLoanDeduction)]] : []),
          // Hitung total gaji bersih dengan mempertimbangkan kasbon dan pinjaman lunak
          ['Total Gaji Bersih', formatCurrency(record.netSalary - (record.advanceAmount || 0) - (record.softLoanDeduction || 0))],
        ],
        theme: 'striped',
        headStyles: { fillColor: [66, 66, 66] },
        columnStyles: {
          0: { cellWidth: 100 },
          1: { cellWidth: 50, halign: 'right' },
        },
        margin: { left: 25 },
      });
      
      // Ambil data kehadiran bulanan untuk karyawan ini
      const response = await fetch(
        `/api/attendance?employeeId=${record.employeeId}&month=${record.month}&year=${record.year}`
      );
      
      let attendanceData = [];
      if (response.ok) {
        const data = await response.json();
        attendanceData = data;
      }
      
      // Tambahkan informasi kehadiran
      const attendanceY = (doc as any).lastAutoTable.finalY + 10;
      
      doc.setFontSize(11);
      doc.setFont("helvetica", "bold");
      doc.text("INFORMASI KEHADIRAN", 10, attendanceY);
      
      autoTable(doc, {
        startY: attendanceY + 5,
        head: [['Deskripsi', 'Jumlah']],
        body: [
          ['Hari Kerja', `${record.daysPresent} hari`],
          ['Hari Tidak Hadir', `${record.daysAbsent} hari`],
          ['Jam Lembur', `${record.overtimeHours} jam`],
        ],
        theme: 'striped',
        headStyles: { fillColor: [66, 66, 66] },
        columnStyles: {
          0: { cellWidth: 100 },
          1: { cellWidth: 50, halign: 'right' },
        },
        margin: { left: 25 },
      });
      
      // Tambahkan tabel jam masuk dan jam pulang
      const timeLogY = (doc as any).lastAutoTable.finalY + 10;
      
      doc.setFontSize(11);
      doc.setFont("helvetica", "bold");
      doc.text("JAM MASUK & JAM PULANG", 10, timeLogY);
      
      // Siapkan data untuk tabel jam masuk dan jam pulang
      const timeLogData = attendanceData
        .filter((attendance: any) => attendance.status === "PRESENT" || attendance.status === "LATE")
        .map((attendance: any) => {
          const date = new Date(attendance.date).toLocaleDateString('id-ID');
          const checkIn = attendance.checkIn ? new Date(attendance.checkIn).toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' }) : '-';
          const checkOut = attendance.checkOut ? new Date(attendance.checkOut).toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' }) : '-';
          const status = attendance.status === "PRESENT" ? "Hadir" : attendance.status === "LATE" ? "Terlambat" : attendance.status;
          
          return [date, checkIn, checkOut, status];
        });
      
      autoTable(doc, {
        startY: timeLogY + 5,
        head: [['Tanggal', 'Jam Masuk', 'Jam Pulang', 'Status']],
        body: timeLogData.length > 0 ? timeLogData : [['Tidak ada data kehadiran', '-', '-', '-']],
        theme: 'striped',
        headStyles: { fillColor: [66, 66, 66] },
        columnStyles: {
          0: { cellWidth: 40 },
          1: { cellWidth: 40 },
          2: { cellWidth: 40 },
          3: { cellWidth: 30 },
        },
        margin: { left: 25 },
      });
      
      // Tambahkan catatan dan tanda tangan
      const notesY = (doc as any).lastAutoTable.finalY + 15;
      
      doc.setFontSize(10);
      doc.setFont("helvetica", "italic");
      doc.text("Catatan: Slip gaji ini diterbitkan secara elektronik dan sah tanpa tanda tangan.", 10, notesY);
      
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      doc.text("Diterbitkan pada: " + new Date().toLocaleDateString('id-ID'), 10, notesY + 5);
      
      // Buat URL data untuk preview
      const pdfBlob = doc.output('blob');
      const pdfUrl = URL.createObjectURL(pdfBlob);
      setPreviewUrl(pdfUrl);
      setShowPreview(true);
      
    } catch (error) {
      console.error("Error generating PDF preview:", error);
      setError("Gagal membuat preview slip gaji");
    } finally {
      setGeneratingPdf(null);
    }
  };
  
  // Fungsi untuk mengunduh PDF setelah preview
  const downloadPdf = () => {
    if (!selectedRecord) return;
    
    try {
      // Buat dokumen PDF baru dengan ukuran A4
      const doc = new jsPDF({
        orientation: "portrait",
        unit: "mm",
        format: "a4",
      });
      
      // Gunakan fungsi yang sama untuk membuat PDF
      // Tambahkan judul
      doc.setFontSize(16);
      doc.setFont("helvetica", "bold");
      doc.text("SLIP GAJI KARYAWAN", 105, 15, { align: "center" });
      
      // Tambahkan logo perusahaan (opsional)
      // doc.addImage("logo.png", "PNG", 10, 10, 30, 15);
      
      // Tambahkan informasi perusahaan
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      doc.text("PT. NAMA PERUSAHAAN", 105, 25, { align: "center" });
      doc.text("Jl. Alamat Perusahaan No. 123, Jakarta", 105, 30, { align: "center" });
      doc.text("Telp: (021) 1234567", 105, 35, { align: "center" });
      
      // Tambahkan garis pemisah
      doc.setLineWidth(0.5);
      doc.line(10, 40, 200, 40);
      
      // Tambahkan informasi karyawan
      doc.setFontSize(11);
      doc.setFont("helvetica", "bold");
      doc.text("INFORMASI KARYAWAN", 10, 50);
      
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      doc.text(`Nama: ${selectedRecord.employeeName}`, 10, 60);
      doc.text(`ID Karyawan: ${selectedRecord.empId}`, 10, 65);
      doc.text(`Jabatan: ${selectedRecord.position || '-'}`, 10, 70);
      doc.text(`Departemen: ${selectedRecord.department || '-'}`, 10, 75);
      
      // Tambahkan informasi periode
      doc.setFontSize(11);
      doc.setFont("helvetica", "bold");
      doc.text("PERIODE PENGGAJIAN", 120, 50);
      
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      doc.text(`Bulan: ${getMonthName(selectedRecord.month)} ${selectedRecord.year}`, 120, 60);
      doc.text(`Tanggal Pembayaran: ${formatDate(selectedRecord.paidAt) || 'Belum dibayar'}`, 120, 65);
      doc.text(`Status: ${selectedRecord.status === "PAID" ? "DIBAYAR" : selectedRecord.status === "PENDING" ? "TERTUNDA" : "DIBATALKAN"}`, 120, 70);
      
      // Tambahkan garis pemisah
      doc.setLineWidth(0.5);
      doc.line(10, 85, 200, 85);
      
      // Tambahkan tabel rincian gaji menggunakan jspdf-autotable
      autoTable(doc, {
        startY: 90,
        head: [['Deskripsi', 'Jumlah']],
        body: [
          ['Gaji Pokok', formatCurrency(selectedRecord.baseSalary)],
          ['Tunjangan', formatCurrency(selectedRecord.totalAllowances)],
          ['Lembur', formatCurrency(selectedRecord.overtimeAmount)],
          ['Potongan Keterlambatan/Absensi', formatCurrency(selectedRecord.totalDeductions)],
          // Tambahkan informasi kasbon jika ada
          ...(selectedRecord.advanceAmount ? [['Potongan Kasbon', formatCurrency(selectedRecord.advanceAmount)]] : []),
          // Tambahkan informasi pinjaman lunak jika ada
          ...(selectedRecord.softLoanDeduction ? [['Cicilan Pinjaman Lunak', formatCurrency(selectedRecord.softLoanDeduction)]] : []),
          // Hitung total gaji bersih dengan mempertimbangkan kasbon dan pinjaman lunak
          ['Total Gaji Bersih', formatCurrency(selectedRecord.netSalary - (selectedRecord.advanceAmount || 0) - (selectedRecord.softLoanDeduction || 0))],
        ],
        theme: 'striped',
        headStyles: { fillColor: [66, 66, 66] },
        columnStyles: {
          0: { cellWidth: 100 },
          1: { cellWidth: 50, halign: 'right' },
        },
        margin: { left: 25 },
      });
      
      // Ambil data kehadiran bulanan untuk karyawan ini
      fetch(
        `/api/attendance?employeeId=${selectedRecord.employeeId}&month=${selectedRecord.month}&year=${selectedRecord.year}`
      )
      .then(response => response.json())
      .then(attendanceData => {
        // Tambahkan informasi kehadiran
        const attendanceY = (doc as any).lastAutoTable.finalY + 10;
        
        doc.setFontSize(11);
        doc.setFont("helvetica", "bold");
        doc.text("INFORMASI KEHADIRAN", 10, attendanceY);
        
        autoTable(doc, {
          startY: attendanceY + 5,
          head: [['Deskripsi', 'Jumlah']],
          body: [
            ['Hari Kerja', `${selectedRecord.daysPresent} hari`],
            ['Hari Tidak Hadir', `${selectedRecord.daysAbsent} hari`],
            ['Jam Lembur', `${selectedRecord.overtimeHours} jam`],
          ],
          theme: 'striped',
          headStyles: { fillColor: [66, 66, 66] },
          columnStyles: {
            0: { cellWidth: 100 },
            1: { cellWidth: 50, halign: 'right' },
          },
          margin: { left: 25 },
        });
        
        // Tambahkan tabel jam masuk dan jam pulang
        const timeLogY = (doc as any).lastAutoTable.finalY + 10;
        
        doc.setFontSize(11);
        doc.setFont("helvetica", "bold");
        doc.text("JAM MASUK & JAM PULANG", 10, timeLogY);
        
        // Siapkan data untuk tabel jam masuk dan jam pulang
        const timeLogData = attendanceData
          .filter((attendance: any) => attendance.status === "PRESENT" || attendance.status === "LATE")
          .map((attendance: any) => {
            const date = new Date(attendance.date).toLocaleDateString('id-ID');
            const checkIn = attendance.checkIn ? new Date(attendance.checkIn).toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' }) : '-';
            const checkOut = attendance.checkOut ? new Date(attendance.checkOut).toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' }) : '-';
            const status = attendance.status === "PRESENT" ? "Hadir" : attendance.status === "LATE" ? "Terlambat" : attendance.status;
            
            return [date, checkIn, checkOut, status];
          });
        
        autoTable(doc, {
          startY: timeLogY + 5,
          head: [['Tanggal', 'Jam Masuk', 'Jam Pulang', 'Status']],
          body: timeLogData.length > 0 ? timeLogData : [['Tidak ada data kehadiran', '-', '-', '-']],
          theme: 'striped',
          headStyles: { fillColor: [66, 66, 66] },
          columnStyles: {
            0: { cellWidth: 40 },
            1: { cellWidth: 40 },
            2: { cellWidth: 40 },
            3: { cellWidth: 30 },
          },
          margin: { left: 25 },
        });
        
        // Tambahkan catatan dan tanda tangan
        const notesY = (doc as any).lastAutoTable.finalY + 15;
        
        doc.setFontSize(10);
        doc.setFont("helvetica", "italic");
        doc.text("Catatan: Slip gaji ini diterbitkan secara elektronik dan sah tanpa tanda tangan.", 10, notesY);
        
        doc.setFontSize(10);
        doc.setFont("helvetica", "normal");
        doc.text("Diterbitkan pada: " + new Date().toLocaleDateString('id-ID'), 10, notesY + 5);
        
        // Simpan PDF dengan nama file yang sesuai
        doc.save(`Slip_Gaji_${selectedRecord.employeeName.replace(/ /g, '_')}_${selectedRecord.month}_${selectedRecord.year}.pdf`);
      });
      
      // Tutup preview setelah mengunduh
      setShowPreview(false);
      setPreviewUrl(null);
      
    } catch (error) {
      console.error("Error downloading PDF:", error);
      setError("Gagal mengunduh PDF slip gaji");
    }
  };

  const handleGeneratePayroll = async () => {
    if (!isAdmin) return;
    
    setGeneratingPayroll(true);
    setError(null);
    
    try {
      const response = await fetch("/api/payroll/generate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          month: selectedMonth,
          year: selectedYear,
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Gagal membuat penggajian");
      }
      
      // Refresh payroll data
      const refreshResponse = await fetch(
        `/api/payroll?month=${selectedMonth}&year=${selectedYear}`
      );
      
      if (!refreshResponse.ok) {
        throw new Error("Gagal menyegarkan data penggajian");
      }
      
      const refreshData = await refreshResponse.json();
      setPayrollRecords(refreshData);
      
    } catch (err: any) {
      console.error("Error generating payroll:", err);
      setError(err.message || "Gagal membuat penggajian");
    } finally {
      setGeneratingPayroll(false);
    }
  };

  const handleMarkAsPaid = async (id: string) => {
    setProcessingId(id);
    setError("");
    
    try {
      const response = await fetch("/api/payroll", {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          ids: [id],
          status: "PAID",
        }),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || "Gagal memperbarui status penggajian");
      }
      
      // Update local state
      setPayrollRecords(
        payrollRecords.map((record) =>
          record.id === id
            ? { ...record, status: "PAID", paidAt: new Date().toISOString() }
            : record
        )
      );
      
      // Show success message or toast notification here if desired
    } catch (err: any) {
      console.error("Error updating payroll:", err);
      setError(err.message || "Gagal memperbarui penggajian");
    } finally {
      setProcessingId(null);
    }
  };

  const months = Array.from({ length: 12 }, (_, i) => i + 1);
  const years = Array.from({ length: 10 }, (_, i) => new Date().getFullYear() - 5 + i);

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-semibold text-gray-900">Penggajian</h1>
        <p className="mt-1 text-sm text-gray-500">
          {isAdmin
            ? "Kelola penggajian karyawan"
            : "Lihat informasi penggajian Anda"}
        </p>
      </div>

      <div className="mt-8">
        <div className="sm:flex sm:items-center">
          <div className="sm:flex-auto">
            <h2 className="text-xl font-semibold text-gray-900">
              Data Penggajian
            </h2>
            <p className="mt-2 text-sm text-gray-700">
              {isAdmin
                ? "Lihat dan kelola data penggajian karyawan"
                : "Lihat data penggajian Anda"}
            </p>
          </div>
          <div className="mt-4 sm:mt-0 sm:ml-16 sm:flex-none space-x-2">
            <select
              value={selectedMonth}
              onChange={(e) => setSelectedMonth(parseInt(e.target.value))}
              className="rounded-md border border-gray-300 py-2 pl-3 pr-10 text-base focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
            >
              {months.map((month) => (
                <option key={month} value={month}>
                  {getMonthName(month)}
                </option>
              ))}
            </select>
            <select
              value={selectedYear}
              onChange={(e) => setSelectedYear(parseInt(e.target.value))}
              className="rounded-md border border-gray-300 py-2 pl-3 pr-10 text-base focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
            >
              {years.map((year) => (
                <option key={year} value={year}>
                  {year}
                </option>
              ))}
            </select>
            {isAdmin && (
              <button
                onClick={handleGeneratePayroll}
                disabled={generatingPayroll}
                className="inline-flex items-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50"
              >
                {generatingPayroll ? "Memproses..." : "Buat Penggajian"}
              </button>
            )}
          </div>
        </div>

        {error && (
          <div className="mt-4 rounded-md bg-red-50 p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <p className="text-sm text-red-700">{error}</p>
              </div>
            </div>
          </div>
        )}

        <div className="mt-4 flex flex-col">
          <div className="-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8">
            <div className="inline-block min-w-full py-2 align-middle md:px-6 lg:px-8">
              <div className="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
                {isLoading ? (
                  <div className="flex justify-center items-center h-24 bg-white">
                    <p className="text-gray-500">Memuat data penggajian...</p>
                  </div>
                ) : payrollRecords.length === 0 ? (
                  <div className="flex justify-center items-center h-24 bg-white">
                    <p className="text-gray-500">Tidak ada data penggajian untuk periode ini</p>
                  </div>
                ) : (
                  <table className="min-w-full divide-y divide-gray-300">
                    <thead className="bg-gray-50">
                      <tr>
                        {isAdmin && (
                          <th
                            scope="col"
                            className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6"
                          >
                            Karyawan
                          </th>
                        )}
                        <th
                          scope="col"
                          className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                        >
                          Periode
                        </th>
                        <th
                          scope="col"
                          className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                        >
                          Gaji Pokok
                        </th>
                        <th
                          scope="col"
                          className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                        >
                          Tunjangan
                        </th>
                        <th
                          scope="col"
                          className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                        >
                          Potongan
                        </th>
                        <th
                          scope="col"
                          className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                        >
                          Gaji Bersih
                        </th>
                        <th
                          scope="col"
                          className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                        >
                          Status
                        </th>
                        <th
                          scope="col"
                          className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                        >
                          Tanggal Bayar
                        </th>
                        <th
                          scope="col"
                          className="relative py-3.5 pl-3 pr-4"
                        >
                          <span className="sr-only">Unduh</span>
                        </th>
                        {isAdmin && (
                          <th
                            scope="col"
                            className="relative py-3.5 pl-3 pr-4 sm:pr-6"
                          >
                            <span className="sr-only">Tindakan</span>
                          </th>
                        )}
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200 bg-white">
                      {payrollRecords.map((record) => (
                        <tr key={record.id}>
                          {isAdmin && (
                            <td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">
                              {record.employeeName}
                              <div className="text-xs text-gray-500">
                                {record.empId}
                              </div>
                            </td>
                          )}
                          <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                            {getMonthName(record.month)} {record.year}
                          </td>
                          <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                            {formatCurrency(record.baseSalary)}
                          </td>
                          <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                            {formatCurrency(record.totalAllowances)}
                          </td>
                          <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                            {formatCurrency(record.totalDeductions)}
                          </td>
                          <td className="whitespace-nowrap px-3 py-4 text-sm font-medium text-gray-900">
                            {formatCurrency(record.netSalary)}
                          </td>
                          <td className="whitespace-nowrap px-3 py-4 text-sm">
                            <span
                              className={`inline-flex rounded-full px-2 text-xs font-semibold leading-5 ${
                                record.status === "PAID"
                                  ? "bg-green-100 text-green-800"
                                  : record.status === "PENDING"
                                  ? "bg-yellow-100 text-yellow-800"
                                  : "bg-gray-100 text-gray-800"
                              }`}
                            >
                              {record.status === "PAID" ? "DIBAYAR" : 
                               record.status === "PENDING" ? "TERTUNDA" : 
                               record.status === "CANCELLED" ? "DIBATALKAN" : record.status}
                            </span>
                          </td>
                          <td className="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                            {formatDate(record.paidAt)}
                          </td>
                          <td className="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium">
                            <button
                              onClick={() => generatePayslipPreview(record)}
                              disabled={generatingPdf === record.id}
                              className="text-green-600 hover:text-green-900 disabled:opacity-50 mr-4"
                            >
                              {generatingPdf === record.id ? "Memproses..." : "Lihat Slip Gaji"}
                            </button>
                          </td>
                          {isAdmin && (
                            <td className="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                              {record.status === "PENDING" && (
                                <button
                                  onClick={() => handleMarkAsPaid(record.id)}
                                  disabled={processingId === record.id}
                                  className="text-indigo-600 hover:text-indigo-900 disabled:opacity-50"
                                >
                                  {processingId === record.id ? "Memproses..." : "Tandai Dibayar"}
                                </button>
                              )}
                            </td>
                          )}
                        </tr>
                      ))}
                    </tbody>
                  </table>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    {/* Modal Preview Slip Gaji */}
    {showPreview && previewUrl && (
      <div className="fixed inset-0 z-10 overflow-y-auto" ref={previewRef}>
        <div className="flex min-h-screen items-end justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
          <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={() => setShowPreview(false)}></div>
          
          <div className="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full sm:p-6">
            <div className="absolute top-0 right-0 pt-4 pr-4">
              <button
                type="button"
                className="bg-white rounded-md text-gray-400 hover:text-gray-500 focus:outline-none"
                onClick={() => setShowPreview(false)}
              >
                <span className="sr-only">Tutup</span>
                <svg className="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            <div className="sm:flex sm:items-start">
              <div className="mt-3 text-center sm:mt-0 sm:text-left w-full">
                <h3 className="text-lg leading-6 font-medium text-gray-900">Preview Slip Gaji</h3>
                <div className="mt-4 h-[70vh] overflow-auto">
                  <iframe 
                    src={previewUrl || ''} 
                    className="w-full h-full border-0" 
                    title="Preview Slip Gaji"
                  />
                </div>
                <div className="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                  <button
                    type="button"
                    className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-600 text-base font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:ml-3 sm:w-auto sm:text-sm"
                    onClick={downloadPdf}
                  >
                    Unduh PDF
                  </button>
                  <button
                    type="button"
                    className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm"
                    onClick={() => setShowPreview(false)}
                  >
                    Tutup
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    )}
  );
}