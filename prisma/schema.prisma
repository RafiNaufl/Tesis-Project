generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String         @id @default(cuid())
  name            String
  email           String         @unique
  hashedPassword  String
  profileImageUrl String?
  role            String         @default("EMPLOYEE")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  employee        Employee?
  notifications   Notification[]
  sessions        Session[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Employee {
  id            String       @id @default(cuid())
  employeeId    String       @unique
  userId        String       @unique
  position      String
  department    String
  basicSalary   Float
  joiningDate   DateTime
  contactNumber String?
  address       String?
  isActive      Boolean      @default(true)
  allowances    Allowance[]
  attendances   Attendance[]
  deductions    Deduction[]
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaveRequests Leave[]
  payrolls      Payroll[]

  @@map("employees")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Attendance {
  id                   String    @id @default(cuid())
  employeeId           String
  date                 DateTime  @default(now())
  checkIn              DateTime?
  checkOut             DateTime?
  status               String    @default("ABSENT")
  notes                String?
  isLate               Boolean   @default(false)
  lateMinutes          Int       @default(0)
  overtime             Int       @default(0)
  isOvertimeApproved   Boolean   @default(false)
  isSundayWork         Boolean   @default(false)
  isSundayWorkApproved Boolean   @default(false)
  approvedBy           String?
  approvedAt           DateTime?
  checkInLatitude      Float?
  checkInLongitude     Float?
  checkInPhotoUrl      String?
  checkOutLatitude     Float?
  checkOutLongitude    Float?
  checkOutPhotoUrl     String?
  employee             Employee  @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, date])
  @@map("attendances")
}

model Payroll {
  id              String    @id @default(cuid())
  employeeId      String
  month           Int
  year            Int
  baseSalary      Float
  totalAllowances Float     @default(0)
  totalDeductions Float     @default(0)
  netSalary       Float
  daysPresent     Int
  daysAbsent      Int
  daysLate        Int       @default(0)
  overtimeHours   Float     @default(0)
  overtimeAmount  Float     @default(0)
  lateDeduction   Float     @default(0)
  status          String    @default("PENDING")
  createdAt       DateTime  @default(now())
  paidAt          DateTime?
  employee        Employee  @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, month, year])
  @@map("payrolls")
}

model Deduction {
  id         String   @id @default(cuid())
  employeeId String
  month      Int
  year       Int
  reason     String
  amount     Float
  date       DateTime @default(now())
  type       String   @default("OTHER")
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("deductions")
}

model Allowance {
  id         String   @id @default(cuid())
  employeeId String
  month      Int
  year       Int
  type       String
  amount     Float
  date       DateTime @default(now())
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("allowances")
}

model Leave {
  id         String    @id @default(cuid())
  employeeId String
  startDate  DateTime
  endDate    DateTime
  reason     String
  type       String
  status     String    @default("PENDING")
  approvedBy String?
  approvedAt DateTime?
  createdAt  DateTime  @default(now())
  employee   Employee  @relation(fields: [employeeId], references: [id])

  @@map("leaves")
}
